#!/usr/bin/env python
import os
import subprocess
import re
import textwrap

version_file = os.path.abspath('version.py')

commit_msg = subprocess.check_output(['git', 'log', '-1', '--pretty=%B']).decode('utf-8').strip()
commit_msg_wrapped = "\n    ".join(textwrap.wrap(commit_msg, width=79))
hashed_code = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip().decode('utf-8')

is_breaking = "BREAKING CHANGE" in commit_msg
is_feat = commit_msg.lower().startswith("feat:")

if os.path.exists(version_file):
    with open(version_file, 'r') as f:
        content = f.read()
        match = re.search(r'version = "(\d+)\.(\d+)\.(\d+)"', content)
        if match:
            major, minor, patch = map(int, match.groups())
        else:
            major, minor, patch = 0, 0, 1
    if is_breaking:
        major += 1
        minor = 0
        patch = 0
    elif is_feat:
        minor += 1
        patch = 0
    else:
        patch += 1
else:
    major, minor, patch = 0, 0, 1

with open(version_file, 'w') as f:
    f.write(f'''"""
Version info generated by pre-commit hook.

Commit message:
    {commit_msg_wrapped}

Hash: {hashed_code}
Version: {major}.{minor}.{patch}
"""

class Version:
    \"\"\"Application version info.\"\"\"

    comment = \"\"\"{commit_msg_wrapped}\"\"\"
    hash = "{hashed_code}"
    version = "{major}.{minor}.{patch}"

if __name__ == "__main__":
    print(Version.version)  # noqa: T201
''')
subprocess.call(['git', 'add', version_file])